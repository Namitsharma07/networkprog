#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>

#define MULTICAST_GROUP "239.0.0.1"
#define PORT 12345

int main() {
    int sockfd;
    struct sockaddr_in localAddr;
    struct ip_mreq multicastRequest;
    char buffer[1024];

    // Step 1: Create socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation error");
        exit(EXIT_FAILURE);
    }

    // Step 2: Set SO_REUSEADDR option
    int reuseAddr = 1;
    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &reuseAddr, sizeof(reuseAddr)) < 0) {
        perror("Setting SO_REUSEADDR option error");
        exit(EXIT_FAILURE);
    }

    // Step 3: Bind to the local port number
    memset(&localAddr, 0, sizeof(localAddr));
    localAddr.sin_family = AF_INET;
    localAddr.sin_addr.s_addr = htonl(INADDR_ANY);
    localAddr.sin_port = htons(PORT);

    if (bind(sockfd, (struct sockaddr*)&localAddr, sizeof(localAddr)) < 0) {
        perror("Bind error");
        exit(EXIT_FAILURE);
    }

    // Step 4: Join the multicast group
    multicastRequest.imr_multiaddr.s_addr = inet_addr(MULTICAST_GROUP);
    multicastRequest.imr_interface.s_addr = htonl(INADDR_ANY);

    if (setsockopt(sockfd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &multicastRequest, sizeof(multicastRequest)) < 0) {
        perror("Setting IP_ADD_MEMBERSHIP option error");
        exit(EXIT_FAILURE);
    }

    // Step 5: Receive the datagram
    ssize_t bytesRead = recvfrom(sockfd, buffer, sizeof(buffer), 0, NULL, NULL);
    if (bytesRead < 0) {
        perror("Recvfrom error");
        exit(EXIT_FAILURE);
    }

    printf("Received message: %s\n", buffer);

    close(sockfd);
    return 0;
}
